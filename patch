diff --git a/src/main/java/org/openbaton/vnfm/generic/GenericVNFM.java b/src/main/java/org/openbaton/vnfm/generic/GenericVNFM.java
index 0973dac..e8d2e8b 100644
--- a/src/main/java/org/openbaton/vnfm/generic/GenericVNFM.java
+++ b/src/main/java/org/openbaton/vnfm/generic/GenericVNFM.java
@@ -17,10 +17,14 @@
 
 package org.openbaton.vnfm.generic;
 
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
 import com.google.gson.JsonObject;
 
 import org.apache.commons.codec.binary.Base64;
 import org.openbaton.catalogue.mano.common.Event;
+import org.openbaton.catalogue.mano.common.Ip;
+import org.openbaton.catalogue.mano.common.LifecycleEvent;
 import org.openbaton.catalogue.mano.descriptor.VNFComponent;
 import org.openbaton.catalogue.mano.descriptor.VirtualDeploymentUnit;
 import org.openbaton.catalogue.mano.record.VNFCInstance;
@@ -30,25 +34,31 @@ import org.openbaton.catalogue.nfvo.Action;
 import org.openbaton.catalogue.nfvo.ConfigurationParameter;
 import org.openbaton.catalogue.nfvo.DependencyParameters;
 import org.openbaton.catalogue.nfvo.Script;
+import org.openbaton.catalogue.nfvo.VNFCDependencyParameters;
 import org.openbaton.catalogue.nfvo.VimInstance;
 import org.openbaton.common.vnfm_sdk.AbstractVnfm;
 import org.openbaton.common.vnfm_sdk.amqp.AbstractVnfmSpringAmqp;
-import org.openbaton.common.vnfm_sdk.exception.BadFormatException;
-import org.openbaton.common.vnfm_sdk.interfaces.EmsInterface;
+import org.openbaton.common.vnfm_sdk.exception.VnfmSdkException;
+import org.openbaton.common.vnfm_sdk.interfaces.EmsRegistrator;
 import org.openbaton.common.vnfm_sdk.utils.VnfmUtils;
-import org.openbaton.vnfm.generic.utils.JsonUtils;
-import org.openbaton.vnfm.generic.utils.LifeCycleManagement;
-import org.openbaton.vnfm.generic.utils.LogUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringApplication;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
 import java.io.*;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.StandardOpenOption;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Scanner;
+import java.util.Set;
 
 /**
  * Created by mob on 16.07.15.
@@ -56,9 +66,18 @@ import java.util.Scanner;
 @EnableScheduling
 public class GenericVNFM extends AbstractVnfmSpringAmqp {
 
-  @Autowired private EmsInterface ems;
+  @Autowired private EmsRegistrator emsRegistrator;
+  private Gson parser = new GsonBuilder().setPrettyPrinting().create();
+  private String scriptPath;
 
-  @Autowired private LifeCycleManagement lcm;
+  @Value("${vnfm.ems.start.timeout:500}")
+  private int waitForEms;
+
+  @Value("${vnfm.ems.script.logpath:/var/log/openbaton/scriptsLog/}")
+  private String scriptsLogPath;
+
+  @Value("${vnfm.ems.script.old:60}")
+  private int old;
 
   @Value("${vnfm.ems.userdata.filepath:/etc/openbaton/openbaton-vnfm-generic-user-data.sh}")
   private String userDataFilePath;
@@ -81,17 +100,8 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
 
     log.info(
         "Instantiation of VirtualNetworkFunctionRecord " + virtualNetworkFunctionRecord.getName());
-    for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
-      for (VNFCInstance vnfcInstance : virtualDeploymentUnit.getVnfc_instance()) {
-        try {
-          ems.checkEms(vnfcInstance.getHostname());
-        } catch (BadFormatException e) {
-          throw new Exception(e.getMessage());
-        }
-      }
-    }
     if (null != scripts) {
-      ems.saveScriptOnEms(virtualNetworkFunctionRecord, scripts);
+      this.saveScriptOnEms(virtualNetworkFunctionRecord, scripts);
     }
 
     for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
@@ -101,9 +111,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
     }
 
     String output = "\n--------------------\n--------------------\n";
-    for (String result :
-        lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, Event.INSTANTIATE)) {
-      output += JsonUtils.parse(result);
+    for (String result : executeScriptsForEvent(virtualNetworkFunctionRecord, Event.INSTANTIATE)) {
+      output +=
+          this.parser
+              .fromJson(result, JsonObject.class)
+              .get("output")
+              .getAsString()
+              .replaceAll("\\\\n", "\n");
       output += "\n--------------------\n";
     }
     output += "\n--------------------\n";
@@ -125,17 +139,16 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
     VNFCInstance vnfcInstance = (VNFCInstance) component;
     if (scaleInOrOut.ordinal() == Action.SCALE_OUT.ordinal()) {
       log.info("Created VNFComponent");
-      try {
-        ems.checkEms(vnfcInstance.getHostname());
-      } catch (BadFormatException e) {
-        throw new Exception(e.getMessage());
-      }
-      ems.saveScriptOnEms(vnfcInstance, scripts, virtualNetworkFunctionRecord);
+      saveScriptOnEms(vnfcInstance, scripts, virtualNetworkFunctionRecord);
       String output = "\n--------------------\n--------------------\n";
       for (String result :
-          lcm.executeScriptsForEvent(
-              virtualNetworkFunctionRecord, vnfcInstance, Event.INSTANTIATE)) {
-        output += JsonUtils.parse(result);
+          executeScriptsForEvent(virtualNetworkFunctionRecord, vnfcInstance, Event.INSTANTIATE)) {
+        output +=
+            this.parser
+                .fromJson(result, JsonObject.class)
+                .get("output")
+                .getAsString()
+                .replaceAll("\\\\n", "\n");
         output += "\n--------------------\n";
       }
       output += "\n--------------------\n";
@@ -144,9 +157,14 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
       if (dependency != null) {
         output = "\n--------------------\n--------------------\n";
         for (String result :
-            lcm.executeScriptsForEvent(
+            executeScriptsForEvent(
                 virtualNetworkFunctionRecord, vnfcInstance, Event.CONFIGURE, dependency)) {
-          output += JsonUtils.parse(result);
+          output +=
+              this.parser
+                  .fromJson(result, JsonObject.class)
+                  .get("output")
+                  .getAsString()
+                  .replaceAll("\\\\n", "\n");
           output += "\n--------------------\n";
         }
         output += "\n--------------------\n";
@@ -159,8 +177,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
             != null) {
           output = "\n--------------------\n--------------------\n";
           for (String result :
-              lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, vnfcInstance, Event.START)) {
-            output += JsonUtils.parse(result);
+              executeScriptsForEvent(virtualNetworkFunctionRecord, vnfcInstance, Event.START)) {
+            output +=
+                this.parser
+                    .fromJson(result, JsonObject.class)
+                    .get("output")
+                    .getAsString()
+                    .replaceAll("\\\\n", "\n");
             output += "\n--------------------\n";
           }
           output += "\n--------------------\n";
@@ -174,9 +197,14 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
 
       String output = "\n--------------------\n--------------------\n";
       for (String result :
-          lcm.executeScriptsForEventOnVnfr(
+          executeScriptsForEventOnVnfr(
               virtualNetworkFunctionRecord, vnfcInstance, Event.SCALE_IN)) {
-        output += JsonUtils.parse(result);
+        output +=
+            this.parser
+                .fromJson(result, JsonObject.class)
+                .get("output")
+                .getAsString()
+                .replaceAll("\\\\n", "\n");
         output += "\n--------------------\n";
       }
       output += "\n--------------------\n";
@@ -186,6 +214,385 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
     }
   }
 
+  private Iterable<? extends String> executeScriptsForEventOnVnfr(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
+      VNFCInstance vnfcInstanceRemote,
+      Event event)
+      throws Exception {
+    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
+    Collection<String> res = new ArrayList<>();
+    LifecycleEvent le =
+        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
+    if (le != null) {
+      log.trace(
+          "The number of scripts for "
+              + virtualNetworkFunctionRecord.getName()
+              + " are: "
+              + le.getLifecycle_events());
+      for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
+        for (VNFCInstance vnfcInstanceLocal : virtualDeploymentUnit.getVnfc_instance()) {
+          for (String script : le.getLifecycle_events()) {
+            log.info(
+                "Sending script: "
+                    + script
+                    + " to VirtualNetworkFunctionRecord: "
+                    + virtualNetworkFunctionRecord.getName()
+                    + " on VNFCInstance: "
+                    + vnfcInstanceLocal.getId());
+            Map<String, String> tempEnv = new HashMap<>();
+            for (Ip ip : vnfcInstanceLocal.getIps()) {
+              log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
+              tempEnv.put(ip.getNetName(), ip.getIp());
+            }
+            log.debug("adding floatingIp: " + vnfcInstanceLocal.getFloatingIps());
+            for (Ip fip : vnfcInstanceLocal.getFloatingIps()) {
+              tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
+            }
+
+            tempEnv.put("hostname", vnfcInstanceLocal.getHostname());
+
+            if (vnfcInstanceRemote != null) {
+              //TODO what should i put here?
+              for (Ip ip : vnfcInstanceRemote.getIps()) {
+                log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
+                tempEnv.put("removing_" + ip.getNetName(), ip.getIp());
+              }
+              log.debug("adding floatingIp: " + vnfcInstanceRemote.getFloatingIps());
+              for (Ip fip : vnfcInstanceRemote.getFloatingIps()) {
+                tempEnv.put("removing_" + fip.getNetName() + "_floatingIp", fip.getIp());
+              }
+
+              tempEnv.put("removing_" + "hostname", vnfcInstanceRemote.getHostname());
+            }
+
+            tempEnv = modifyUnsafeEnvVarNames(tempEnv);
+            env.putAll(tempEnv);
+            log.info("The Environment Variables for script " + script + " are: " + env);
+
+            String command = getJsonObject("EXECUTE", script, env).toString();
+            String output =
+                executeActionOnEMS(
+                    vnfcInstanceLocal.getHostname(),
+                    command,
+                    virtualNetworkFunctionRecord,
+                    vnfcInstanceLocal);
+            res.add(output);
+
+            saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstanceLocal, output);
+            for (String key : tempEnv.keySet()) {
+              env.remove(key);
+            }
+          }
+        }
+      }
+    }
+    return res;
+  }
+
+  private Map<String, String> modifyUnsafeEnvVarNames(Map<String, String> env) {
+
+    Map<String, String> result = new HashMap<>();
+
+    for (Entry<String, String> entry : env.entrySet()) {
+      result.put(entry.getKey().replaceAll("[^A-Za-z0-9_]", "_"), entry.getValue());
+    }
+
+    return result;
+  }
+
+  private Iterable<String> executeScriptsForEvent(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
+      VNFCInstance vnfcInstance,
+      Event event)
+      throws Exception {
+    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
+    List<String> res = new ArrayList<>();
+    LifecycleEvent le =
+        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
+
+    if (le != null) {
+      log.trace(
+          "The number of scripts for "
+              + virtualNetworkFunctionRecord.getName()
+              + " are: "
+              + le.getLifecycle_events());
+      for (String script : le.getLifecycle_events()) {
+        log.info(
+            "Sending script: "
+                + script
+                + " to VirtualNetworkFunctionRecord: "
+                + virtualNetworkFunctionRecord.getName());
+        Map<String, String> tempEnv = new HashMap<>();
+        for (Ip ip : vnfcInstance.getIps()) {
+          log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
+          tempEnv.put(ip.getNetName(), ip.getIp());
+        }
+        log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
+        for (Ip fip : vnfcInstance.getFloatingIps()) {
+          tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
+        }
+
+        tempEnv.put("hostname", vnfcInstance.getHostname());
+
+        tempEnv = modifyUnsafeEnvVarNames(tempEnv);
+        env.putAll(tempEnv);
+        log.info("The Environment Variables for script " + script + " are: " + env);
+
+        String command = getJsonObject("EXECUTE", script, env).toString();
+        if (event.ordinal() == Event.SCALE_IN.ordinal()) {
+          for (VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord.getVdu()) {
+            for (VNFCInstance vnfcInstance1 : vdu.getVnfc_instance()) {
+
+              String output =
+                  executeActionOnEMS(
+                      vnfcInstance1.getHostname(),
+                      command,
+                      virtualNetworkFunctionRecord,
+                      vnfcInstance);
+              res.add(output);
+              saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance1, output);
+            }
+          }
+        } else {
+          res.add(
+              executeActionOnEMS(
+                  vnfcInstance.getHostname(), command, virtualNetworkFunctionRecord, vnfcInstance));
+        }
+
+        for (String key : tempEnv.keySet()) {
+          env.remove(key);
+        }
+      }
+    }
+    return res;
+  }
+
+  private void saveLogToFile(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
+      String script,
+      VNFCInstance vnfcInstance1,
+      String output)
+      throws IOException {
+    saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance1, output, false);
+  }
+
+  private void saveLogToFile(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
+      String script,
+      VNFCInstance vnfcInstance1,
+      String output,
+      boolean error)
+      throws IOException {
+    if (this.old > 0) {
+      String path = "";
+      if (!error) {
+        path =
+            this.scriptsLogPath
+                + virtualNetworkFunctionRecord.getName()
+                + "/"
+                + vnfcInstance1.getHostname()
+                + ".log";
+      } else {
+        path =
+            this.scriptsLogPath
+                + virtualNetworkFunctionRecord.getName()
+                + "/"
+                + vnfcInstance1.getHostname()
+                + "-error.log";
+      }
+      File f = new File(path);
+
+      if (!f.exists()) {
+        f.getParentFile().mkdirs();
+        f.createNewFile();
+      }
+
+      if (!error) {
+        Files.write(
+            Paths.get(path),
+            ("Output of Script : " + script + "\n\n").getBytes(),
+            StandardOpenOption.APPEND);
+        Files.write(
+            Paths.get(path),
+            this.parser
+                .fromJson(output, JsonObject.class)
+                .get("output")
+                .getAsString()
+                .replaceAll("\\\\n", "\n")
+                .getBytes(),
+            StandardOpenOption.APPEND);
+      } else {
+        Files.write(
+            Paths.get(path),
+            ("Error log of Script : " + script + "\n\n").getBytes(),
+            StandardOpenOption.APPEND);
+        Files.write(
+            Paths.get(path),
+            this.parser
+                .fromJson(output, JsonObject.class)
+                .get("err")
+                .getAsString()
+                .replaceAll("\\\\n", "\n")
+                .getBytes(),
+            StandardOpenOption.APPEND);
+      }
+      Files.write(
+          Paths.get(path),
+          "\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~\n#########################\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n"
+              .getBytes(),
+          StandardOpenOption.APPEND);
+    }
+  }
+
+  private Iterable<String> executeScriptsForEvent(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
+      VNFCInstance vnfcInstance,
+      Event event,
+      String cause)
+      throws Exception {
+    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
+    List<String> res = new LinkedList<>();
+    LifecycleEvent le =
+        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
+
+    if (le != null) {
+      log.trace(
+          "The number of scripts for "
+              + virtualNetworkFunctionRecord.getName()
+              + " are: "
+              + le.getLifecycle_events());
+      for (String script : le.getLifecycle_events()) {
+        log.info(
+            "Sending script: "
+                + script
+                + " to VirtualNetworkFunctionRecord: "
+                + virtualNetworkFunctionRecord.getName());
+        Map<String, String> tempEnv = new HashMap<>();
+        for (Ip ip : vnfcInstance.getIps()) {
+          log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
+          tempEnv.put(ip.getNetName(), ip.getIp());
+        }
+        log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
+        for (Ip fip : vnfcInstance.getFloatingIps()) {
+          tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
+        }
+
+        tempEnv.put("hostname", vnfcInstance.getHostname());
+        //Add cause to the environment variables
+        tempEnv.put("cause", cause);
+
+        tempEnv = modifyUnsafeEnvVarNames(tempEnv);
+        env.putAll(tempEnv);
+        log.info("The Environment Variables for script " + script + " are: " + env);
+
+        String command = getJsonObject("EXECUTE", script, env).toString();
+        String output =
+            executeActionOnEMS(
+                vnfcInstance.getHostname(), command, virtualNetworkFunctionRecord, vnfcInstance);
+        res.add(output);
+        saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
+        for (String key : tempEnv.keySet()) {
+          env.remove(key);
+        }
+      }
+    }
+    return res;
+  }
+
+  private Iterable<String> executeScriptsForEvent(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
+      VNFCInstance vnfcInstance,
+      Event event,
+      VNFRecordDependency dependency)
+      throws Exception {
+    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
+    List<String> res = new ArrayList<>();
+    LifecycleEvent le =
+        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
+    log.trace(
+        "The number of scripts for "
+            + virtualNetworkFunctionRecord.getName()
+            + " are: "
+            + le.getLifecycle_events());
+    log.debug("DEPENDENCY IS: " + dependency);
+    if (le != null) {
+      for (String script : le.getLifecycle_events()) {
+        int indexOf = script.indexOf('_');
+        VNFCDependencyParameters vnfcDependencyParameters = null;
+        String type = null;
+        if (indexOf != -1) {
+          type = script.substring(0, indexOf);
+          vnfcDependencyParameters = dependency.getVnfcParameters().get(type);
+        }
+        if (vnfcDependencyParameters != null) {
+          log.debug(
+              "There are "
+                  + vnfcDependencyParameters.getParameters().size()
+                  + " VNFCInstanceForeign");
+          for (String vnfcForeignId : vnfcDependencyParameters.getParameters().keySet()) {
+            log.info("Running script: " + script + " for VNFCInstance foreign id " + vnfcForeignId);
+
+            log.info(
+                "Sending command: "
+                    + script
+                    + " to adding relation with type: "
+                    + type
+                    + " from VirtualNetworkFunctionRecord "
+                    + virtualNetworkFunctionRecord.getName());
+
+            Map<String, String> tempEnv = new HashMap<>();
+
+            //Adding own ips
+            for (Ip ip : vnfcInstance.getIps()) {
+              log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
+              tempEnv.put(ip.getNetName(), ip.getIp());
+            }
+
+            //Adding own floating ip
+            log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
+            for (Ip fip : vnfcInstance.getFloatingIps()) {
+              tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
+            }
+            //Adding foreign parameters such as ip
+            if (script.contains("_")) {
+              //Adding foreign parameters such as ip
+              Map<String, String> parameters = dependency.getParameters().get(type).getParameters();
+              for (Entry<String, String> param : parameters.entrySet()) {
+                tempEnv.put(type + "_" + param.getKey(), param.getValue());
+              }
+
+              Map<String, String> parametersVNFC =
+                  vnfcDependencyParameters.getParameters().get(vnfcForeignId).getParameters();
+              for (Entry<String, String> param : parametersVNFC.entrySet()) {
+                tempEnv.put(type + "_" + param.getKey(), param.getValue());
+              }
+            }
+
+            tempEnv.put("hostname", vnfcInstance.getHostname());
+            tempEnv = modifyUnsafeEnvVarNames(tempEnv);
+            env.putAll(tempEnv);
+            log.info("The Environment Variables for script " + script + " are: " + env);
+
+            String command = getJsonObject("EXECUTE", script, env).toString();
+            String output =
+                executeActionOnEMS(
+                    vnfcInstance.getHostname(),
+                    command,
+                    virtualNetworkFunctionRecord,
+                    vnfcInstance);
+            res.add(output);
+
+            saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
+            for (String key : tempEnv.keySet()) {
+              env.remove(key);
+            }
+          }
+        }
+      }
+    }
+    return res;
+  }
+
   @Override
   public void checkInstantiationFeasibility() {}
 
@@ -207,7 +614,7 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
                 != null) {
               log.debug(
                   "Executed scripts for event START "
-                      + lcm.executeScriptsForEvent(
+                      + this.executeScriptsForEvent(
                           virtualNetworkFunctionRecord, component, Event.START));
             }
             log.debug("Changing the status from standby to active");
@@ -230,9 +637,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
         log.info("-----------------------------------------------------------------------");
         String output = "\n--------------------\n--------------------\n";
         for (String result :
-            lcm.executeScriptsForEvent(
-                virtualNetworkFunctionRecord, component, Event.HEAL, cause)) {
-          output += JsonUtils.parse(result);
+            executeScriptsForEvent(virtualNetworkFunctionRecord, component, Event.HEAL, cause)) {
+          output +=
+              this.parser
+                  .fromJson(result, JsonObject.class)
+                  .get("output")
+                  .getAsString()
+                  .replaceAll("\\\\n", "\n");
           output += "\n--------------------\n";
         }
         output += "\n--------------------\n";
@@ -260,12 +671,12 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
       VNFCInstance vnfcInstance)
       throws Exception {
     JsonObject jsonMessage =
-        JsonUtils.getJsonObjectForScript(
+        getJsonObjectForScript(
             "SCRIPTS_UPDATE",
             Base64.encodeBase64String(script.getPayload()),
             script.getName(),
-            properties.getProperty("script-path", "/opt/openbaton/scripts"));
-    ems.executeActionOnEMS(
+            scriptPath);
+    executeActionOnEMS(
         vnfcInstance.getHostname(),
         jsonMessage.toString(),
         virtualNetworkFunctionRecord,
@@ -301,8 +712,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
       log.info("-----------------------------------------------------------------------");
       String output = "\n--------------------\n--------------------\n";
       for (String result :
-          lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, Event.CONFIGURE, dependency)) {
-        output += JsonUtils.parse(result);
+          executeScriptsForEvent(virtualNetworkFunctionRecord, Event.CONFIGURE, dependency)) {
+        output +=
+            this.parser
+                .fromJson(result, JsonObject.class)
+                .get("output")
+                .getAsString()
+                .replaceAll("\\\\n", "\n");
         output += "\n--------------------\n";
       }
       output += "\n--------------------\n";
@@ -324,9 +740,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
             virtualNetworkFunctionRecord.getLifecycle_event(), Event.TERMINATE)
         != null) {
       String output = "\n--------------------\n--------------------\n";
-      for (String result :
-          lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, Event.TERMINATE)) {
-        output += JsonUtils.parse(result);
+      for (String result : executeScriptsForEvent(virtualNetworkFunctionRecord, Event.TERMINATE)) {
+        output +=
+            this.parser
+                .fromJson(result, JsonObject.class)
+                .get("output")
+                .getAsString()
+                .replaceAll("\\\\n", "\n");
         output += "\n--------------------\n";
       }
       output += "\n--------------------\n";
@@ -336,7 +756,7 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
     for (VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord.getVdu()) {
       for (VNFCInstance vnfci : vdu.getVnfc_instance()) {
         log.warn("Canceling wait of EMS for: " + vnfci.getHostname());
-        ems.unregister(vnfci.getHostname());
+        emsRegistrator.unregister(vnfci.getHostname());
       }
     }
 
@@ -350,9 +770,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
         != null) {
       String output = "\n--------------------\n--------------------\n";
       try {
-        for (String result :
-            lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, Event.ERROR)) {
-          output += JsonUtils.parse(result);
+        for (String result : executeScriptsForEvent(virtualNetworkFunctionRecord, Event.ERROR)) {
+          output +=
+              this.parser
+                  .fromJson(result, JsonObject.class)
+                  .get("output")
+                  .getAsString()
+                  .replaceAll("\\\\n", "\n");
           output += "\n--------------------\n";
         }
       } catch (Exception e) {
@@ -392,9 +816,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
               .getLifecycle_events()
           != null) {
         String output = "\n--------------------\n--------------------\n";
-        for (String result :
-            lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, Event.START)) {
-          output += JsonUtils.parse(result);
+        for (String result : executeScriptsForEvent(virtualNetworkFunctionRecord, Event.START)) {
+          output +=
+              this.parser
+                  .fromJson(result, JsonObject.class)
+                  .get("output")
+                  .getAsString()
+                  .replaceAll("\\\\n", "\n");
           output += "\n--------------------\n";
         }
         output += "\n--------------------\n";
@@ -416,8 +844,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
               .getLifecycle_events()
           != null) {
         String output = "\n--------------------\n--------------------\n";
-        for (String result : lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, Event.STOP)) {
-          output += JsonUtils.parse(result);
+        for (String result : executeScriptsForEvent(virtualNetworkFunctionRecord, Event.STOP)) {
+          output +=
+              this.parser
+                  .fromJson(result, JsonObject.class)
+                  .get("output")
+                  .getAsString()
+                  .replaceAll("\\\\n", "\n");
           output += "\n--------------------\n";
         }
         output += "\n--------------------\n";
@@ -442,8 +875,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
           != null) {
         String output = "\n--------------------\n--------------------\n";
         for (String result :
-            lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, vnfcInstance, Event.START)) {
-          output += JsonUtils.parse(result);
+            executeScriptsForEvent(virtualNetworkFunctionRecord, vnfcInstance, Event.START)) {
+          output +=
+              this.parser
+                  .fromJson(result, JsonObject.class)
+                  .get("output")
+                  .getAsString()
+                  .replaceAll("\\\\n", "\n");
           output += "\n--------------------\n";
         }
         output += "\n--------------------\n";
@@ -472,8 +910,13 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
           != null) {
         String output = "\n--------------------\n--------------------\n";
         for (String result :
-            lcm.executeScriptsForEvent(virtualNetworkFunctionRecord, vnfcInstance, Event.STOP)) {
-          output += JsonUtils.parse(result);
+            executeScriptsForEvent(virtualNetworkFunctionRecord, vnfcInstance, Event.STOP)) {
+          output +=
+              this.parser
+                  .fromJson(result, JsonObject.class)
+                  .get("output")
+                  .getAsString()
+                  .replaceAll("\\\\n", "\n");
           output += "\n--------------------\n";
         }
         output += "\n--------------------\n";
@@ -507,11 +950,361 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
   public void NotifyChange() {}
 
   @Override
+  protected void checkEMS(String hostname) {
+    log.debug("Starting wait of EMS for: " + hostname);
+    this.emsRegistrator.register(hostname);
+    int i = 0;
+    while (true) {
+      log.debug(
+          "Number of expected EMS hostnames: " + this.emsRegistrator.getExpectedHostnames().size());
+      log.debug("Waiting for " + hostname + " EMS to be started... (" + i * 5 + " secs)");
+      i++;
+      try {
+        checkEmsStarted(hostname);
+        break;
+      } catch (RuntimeException e) {
+        if (i == this.waitForEms / 5) {
+          throw e;
+        }
+        try {
+          Thread.sleep(5000);
+        } catch (InterruptedException e1) {
+          e1.printStackTrace();
+        }
+      }
+    }
+  }
+
+  @Override
+  protected void checkEmsStarted(String hostname) {
+    if (this.emsRegistrator
+        .getExpectedHostnames()
+        .contains(hostname.toLowerCase().replace("_", "-"))) {
+      throw new RuntimeException("No EMS for hostname: " + hostname);
+    }
+  }
+
+  private String executeActionOnEMS(
+      String vduHostname,
+      String command,
+      VirtualNetworkFunctionRecord vnfr,
+      VNFCInstance vnfcInstance)
+      throws Exception {
+    log.trace("Sending message and waiting: " + command + " to " + vduHostname);
+    log.info("Waiting answer from EMS - " + vduHostname);
+
+    String response =
+        this.vnfmHelper.sendAndReceive(
+            command, "vnfm." + vduHostname.toLowerCase().replace("_", "-") + ".actions");
+
+    log.debug("Received from EMS (" + vduHostname + "): " + response);
+
+    if (response == null) {
+      throw new NullPointerException("Response from EMS is null");
+    }
+
+    JsonObject jsonObject = this.parser.fromJson(response, JsonObject.class);
+
+    if (jsonObject.get("status").getAsInt() == 0) {
+      try {
+        log.debug("Output from EMS (" + vduHostname + ") is: " + jsonObject.get("output"));
+      } catch (Exception e) {
+        e.printStackTrace();
+        throw e;
+      }
+    } else {
+      String err = jsonObject.get("err").getAsString();
+      log.error(err);
+      vnfcInstance.setState("error");
+      saveLogToFile(
+          vnfr,
+          parser.fromJson(command, JsonObject.class).get("payload").getAsString(),
+          vnfcInstance,
+          response,
+          true);
+      throw new VnfmSdkException("EMS (" + vduHostname + ") had the following error: " + err);
+    }
+    return response;
+  }
+
+  public Iterable<String> executeScriptsForEvent(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord, Event event)
+      throws Exception { //TODO make it parallel
+    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
+    Collection<String> res = new ArrayList<>();
+    LifecycleEvent le =
+        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
+
+    if (le != null) {
+      log.trace(
+          "The number of scripts for "
+              + virtualNetworkFunctionRecord.getName()
+              + " are: "
+              + le.getLifecycle_events());
+      for (String script : le.getLifecycle_events()) {
+        log.info(
+            "Sending script: "
+                + script
+                + " to VirtualNetworkFunctionRecord: "
+                + virtualNetworkFunctionRecord.getName());
+        for (VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord.getVdu()) {
+          for (VNFCInstance vnfcInstance : vdu.getVnfc_instance()) {
+
+            Map<String, String> tempEnv = new HashMap<>();
+            for (Ip ip : vnfcInstance.getIps()) {
+              log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
+              tempEnv.put(ip.getNetName(), ip.getIp());
+            }
+            log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
+            for (Ip fip : vnfcInstance.getFloatingIps()) {
+              tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
+            }
+
+            tempEnv.put("hostname", vnfcInstance.getHostname());
+            tempEnv = modifyUnsafeEnvVarNames(tempEnv);
+            env.putAll(tempEnv);
+            log.info("Environment Variables are: " + env);
+
+            String command = getJsonObject("EXECUTE", script, env).toString();
+            String output =
+                executeActionOnEMS(
+                    vnfcInstance.getHostname(),
+                    command,
+                    virtualNetworkFunctionRecord,
+                    vnfcInstance);
+            res.add(output);
+
+            saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
+            for (String key : tempEnv.keySet()) {
+              env.remove(key);
+            }
+          }
+        }
+      }
+    }
+    return res;
+  }
+
+  public Iterable<String> executeScriptsForEvent(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
+      Event event,
+      VNFRecordDependency dependency)
+      throws Exception {
+    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
+    LifecycleEvent le =
+        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
+    List<String> res = new ArrayList<>();
+    if (le != null) {
+      for (String script : le.getLifecycle_events()) {
+
+        String type = null;
+        if (script.contains("_")) {
+          type = script.substring(0, script.indexOf('_'));
+          log.info(
+              "Sending command: "
+                  + script
+                  + " to adding relation with type: "
+                  + type
+                  + " from VirtualNetworkFunctionRecord "
+                  + virtualNetworkFunctionRecord.getName());
+        }
+
+        for (VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord.getVdu()) {
+          for (VNFCInstance vnfcInstance : vdu.getVnfc_instance()) {
+            if (dependency.getVnfcParameters().get(type) != null) {
+              for (String vnfcId :
+                  dependency.getVnfcParameters().get(type).getParameters().keySet()) {
+
+                Map<String, String> tempEnv = new HashMap<>();
+
+                //Adding own ips
+                for (Ip ip : vnfcInstance.getIps()) {
+                  log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
+                  tempEnv.put(ip.getNetName(), ip.getIp());
+                }
+
+                //Adding own floating ip
+                for (Ip fip : vnfcInstance.getFloatingIps()) {
+                  log.debug("adding floatingIp: " + fip.getNetName() + " = " + fip.getIp());
+                  tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
+                }
+
+                if (script.contains("_")) {
+                  //Adding foreign parameters such as ip
+                  log.debug("Fetching parameter from dependency of type: " + type);
+                  Map<String, String> parameters =
+                      dependency.getParameters().get(type).getParameters();
+
+                  for (Map.Entry<String, String> param : parameters.entrySet()) {
+                    log.debug(
+                        "adding param: " + type + "_" + param.getKey() + " = " + param.getValue());
+                    tempEnv.put(type + "_" + param.getKey(), param.getValue());
+                  }
+
+                  Map<String, String> parametersVNFC =
+                      dependency
+                          .getVnfcParameters()
+                          .get(type)
+                          .getParameters()
+                          .get(vnfcId)
+                          .getParameters();
+                  for (Map.Entry<String, String> param : parametersVNFC.entrySet()) {
+                    log.debug(
+                        "adding param: " + type + "_" + param.getKey() + " = " + param.getValue());
+                    tempEnv.put(type + "_" + param.getKey(), param.getValue());
+                  }
+                }
+
+                tempEnv.put("hostname", vnfcInstance.getHostname());
+                tempEnv = modifyUnsafeEnvVarNames(tempEnv);
+                env.putAll(tempEnv);
+                log.info("Environment Variables are: " + env);
+
+                String command = getJsonObject("EXECUTE", script, env).toString();
+                String output =
+                    executeActionOnEMS(
+                        vnfcInstance.getHostname(),
+                        command,
+                        virtualNetworkFunctionRecord,
+                        vnfcInstance);
+                res.add(output);
+
+                saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
+                for (String key : tempEnv.keySet()) {
+                  env.remove(key);
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+    return res;
+  }
+
+  public void saveScriptOnEms(
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord, Object scripts) throws Exception {
+
+    log.debug("Scripts are: " + scripts.getClass().getName());
+
+    if (scripts instanceof String) {
+      String scriptLink = (String) scripts;
+      log.debug("Scripts are: " + scriptLink);
+      JsonObject jsonMessage = getJsonObject("CLONE_SCRIPTS", scriptLink, this.scriptPath);
+
+      for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
+        for (VNFCInstance vnfcInstance : virtualDeploymentUnit.getVnfc_instance()) {
+          executeActionOnEMS(
+              vnfcInstance.getHostname(),
+              jsonMessage.toString(),
+              virtualNetworkFunctionRecord,
+              vnfcInstance);
+        }
+      }
+    } else if (scripts instanceof Set) {
+      Iterable<Script> scriptSet = (Set<Script>) scripts;
+
+      for (Script script : scriptSet) {
+        log.debug("Sending script encoded base64 ");
+        String base64String = Base64.encodeBase64String(script.getPayload());
+        log.trace("The base64 string is: " + base64String);
+        JsonObject jsonMessage =
+            getJsonObjectForScript("SAVE_SCRIPTS", base64String, script.getName(), this.scriptPath);
+        for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
+          for (VNFCInstance vnfcInstance : virtualDeploymentUnit.getVnfc_instance()) {
+            executeActionOnEMS(
+                vnfcInstance.getHostname(),
+                jsonMessage.toString(),
+                virtualNetworkFunctionRecord,
+                vnfcInstance);
+          }
+        }
+      }
+    }
+  }
+
+  public void saveScriptOnEms(
+      VNFCInstance vnfcInstance,
+      Object scripts,
+      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord)
+      throws Exception {
+
+    log.debug("Scripts are: " + scripts.getClass().getName());
+
+    if (scripts instanceof String) {
+      String scriptLink = (String) scripts;
+      log.debug("Scripts are: " + scriptLink);
+      JsonObject jsonMessage = getJsonObject("CLONE_SCRIPTS", scriptLink, this.scriptPath);
+      executeActionOnEMS(
+          vnfcInstance.getHostname(),
+          jsonMessage.toString(),
+          virtualNetworkFunctionRecord,
+          vnfcInstance);
+    } else if (scripts instanceof Set) {
+      Iterable<Script> scriptSet = (Set<Script>) scripts;
+      for (Script script : scriptSet) {
+        log.debug("Sending script encoded base64 ");
+        String base64String = Base64.encodeBase64String(script.getPayload());
+        log.trace("The base64 string is: " + base64String);
+        JsonObject jsonMessage =
+            getJsonObjectForScript("SAVE_SCRIPTS", base64String, script.getName(), this.scriptPath);
+        executeActionOnEMS(
+            vnfcInstance.getHostname(),
+            jsonMessage.toString(),
+            virtualNetworkFunctionRecord,
+            vnfcInstance);
+      }
+    }
+  }
+
+  private JsonObject getJsonObject(String action, String payload, String scriptPath) {
+    JsonObject jsonMessage = new JsonObject();
+    jsonMessage.addProperty("action", action);
+    jsonMessage.addProperty("payload", payload);
+    jsonMessage.addProperty("script-path", scriptPath);
+    return jsonMessage;
+  }
+
+  private JsonObject getJsonObject(String action, String payload, Map<String, String> env) {
+    JsonObject jsonMessage = new JsonObject();
+    jsonMessage.addProperty("action", action);
+    jsonMessage.addProperty("payload", payload);
+    jsonMessage.add("env", this.parser.fromJson(this.parser.toJson(env), JsonObject.class));
+    return jsonMessage;
+  }
+
+  private JsonObject getJsonObjectForScript(
+      String save_scripts, String payload, String name, String scriptPath) {
+    JsonObject jsonMessage = new JsonObject();
+    jsonMessage.addProperty("action", save_scripts);
+    jsonMessage.addProperty("payload", payload);
+    jsonMessage.addProperty("name", name);
+    jsonMessage.addProperty("script-path", scriptPath);
+    return jsonMessage;
+  }
+
+  private Map<String, String> getMap(VirtualNetworkFunctionRecord virtualNetworkFunctionRecord) {
+    Map<String, String> res = new HashMap<>();
+    for (ConfigurationParameter configurationParameter :
+        virtualNetworkFunctionRecord.getProvides().getConfigurationParameters()) {
+      res.put(configurationParameter.getConfKey(), configurationParameter.getValue());
+    }
+    for (ConfigurationParameter configurationParameter :
+        virtualNetworkFunctionRecord.getConfigurations().getConfigurationParameters()) {
+      res.put(configurationParameter.getConfKey(), configurationParameter.getValue());
+    }
+    res = modifyUnsafeEnvVarNames(res);
+    return res;
+  }
+
+  @Override
   protected void setup() {
     super.setup();
-    String scriptPath = properties.getProperty("script-path", "/opt/openbaton/scripts");
-    LogUtils.init();
-    ems.init(scriptPath, vnfmHelper);
+    scriptPath = properties.getProperty("script-path", "/opt/openbaton/scripts");
+    if (this.old > 0) {
+      File f = new File(this.scriptsLogPath);
+      f.mkdirs();
+    }
   }
 
   @Override
@@ -531,7 +1324,7 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
       }
     }
 
-    log.debug(ems.getEmsVersion());
+    log.debug(emsVersion);
 
     result = result.replace("export MONITORING_IP=", "export MONITORING_IP=" + monitoringIp);
     result = result.replace("export TIMEZONE=", "export TIMEZONE=" + timezone);
@@ -540,11 +1333,9 @@ public class GenericVNFM extends AbstractVnfmSpringAmqp {
     result = result.replace("export USERNAME=", "export USERNAME=" + username);
     result = result.replace("export PASSWORD=", "export PASSWORD=" + password);
     result = result.replace("export EXCHANGE_NAME=", "export EXCHANGE_NAME=" + exchangeName);
-    result =
-        result.replace("export EMS_HEARTBEAT=", "export EMS_HEARTBEAT=" + ems.getEmsHeartbeat());
-    result =
-        result.replace("export EMS_AUTODELETE=", "export EMS_AUTODELETE=" + ems.getEmsAutodelete());
-    result = result.replace("export EMS_VERSION=", "export EMS_VERSION=" + ems.getEmsVersion());
+    result = result.replace("export EMS_HEARTBEAT=", "export EMS_HEARTBEAT=" + emsHeartbeat);
+    result = result.replace("export EMS_AUTODELETE=", "export EMS_AUTODELETE=" + emsAutodelete);
+    result = result.replace("export EMS_VERSION=", "export EMS_VERSION=" + emsVersion);
     result = result.replace("export ENDPOINT=", "export ENDPOINT=" + type);
 
     return result;
diff --git a/src/main/java/org/openbaton/vnfm/generic/utils/EMS.java b/src/main/java/org/openbaton/vnfm/generic/utils/EMS.java
deleted file mode 100644
index f283150..0000000
--- a/src/main/java/org/openbaton/vnfm/generic/utils/EMS.java
+++ /dev/null
@@ -1,308 +0,0 @@
-/*
- * Copyright (c) 2016 Open Baton (http://www.openbaton.org)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.openbaton.vnfm.generic.utils;
-
-import ch.qos.logback.core.net.SyslogOutputStream;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import org.apache.commons.codec.binary.Base64;
-import org.openbaton.catalogue.mano.descriptor.VirtualDeploymentUnit;
-import org.openbaton.catalogue.mano.record.VNFCInstance;
-import org.openbaton.catalogue.mano.record.VirtualNetworkFunctionRecord;
-import org.openbaton.catalogue.nfvo.Script;
-import org.openbaton.common.vnfm_sdk.VnfmHelper;
-import org.openbaton.common.vnfm_sdk.exception.BadFormatException;
-import org.openbaton.common.vnfm_sdk.exception.VnfmSdkException;
-import org.openbaton.common.vnfm_sdk.interfaces.EmsInterface;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Service;
-
-import javax.annotation.PostConstruct;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Created by lto on 15/09/15.
- */
-@Service
-@Scope
-public class EMS implements EmsInterface {
-
-  private static Gson parser = new GsonBuilder().setPrettyPrinting().create();
-
-  private Logger log = LoggerFactory.getLogger(getClass());
-
-  @Value("${vnfm.ems.start.timeout:500}")
-  private int waitForEms;
-
-  @Value("${vnfm.ems.queue.heartbeat}")
-  protected String emsHeartbeat;
-
-  @Value("${vnfm.ems.queue.autodelete}")
-  protected String emsAutodelete;
-
-  @Value("${vnfm.ems.version}")
-  protected String emsVersion;
-
-  //TODO consider using DB in case of failure etc...
-  private Set<String> expectedHostnames;
-
-  private String scriptPath;
-
-  private VnfmHelper vnfmHelper;
-
-  public void init(String scriptPath, VnfmHelper vnfmHelper) {
-    this.scriptPath = scriptPath;
-    this.expectedHostnames = new HashSet<>();
-    this.vnfmHelper = vnfmHelper;
-  }
-
-  public Set<String> getExpectedHostnames() {
-    return this.expectedHostnames;
-  }
-
-  public void register(String hostname) {
-    this.log.debug("EMSRegister adding: " + hostname);
-    this.expectedHostnames.add(hostname);
-  }
-
-  public void unregister(String hostname) {
-    this.log.debug("EMSRegister removing: " + hostname);
-    if (this.expectedHostnames.contains(hostname)) this.expectedHostnames.remove(hostname);
-  }
-
-  @Override
-  public void unregisterFromMsg(String json) {
-    this.log.debug("EMSRegister received: " + json);
-    JsonObject object = this.parser.fromJson(json, JsonObject.class);
-    String hostname = object.get("hostname").getAsString();
-    this.log.debug("EMSRegister removing: " + hostname);
-    if (this.expectedHostnames.contains(hostname)) this.expectedHostnames.remove(hostname);
-  }
-
-  @Override
-  public void checkEms(String hostname) throws BadFormatException {
-    log.debug("Starting wait of EMS for: " + hostname);
-    this.register(hostname);
-    int i = 0;
-    while (true) {
-      log.debug("Number of expected EMS hostnames: " + this.getExpectedHostnames().size());
-      log.debug("Waiting for " + hostname + " EMS to be started... (" + i * 5 + " secs)");
-      i++;
-      try {
-        checkEmsStarted(hostname);
-        break;
-      } catch (RuntimeException e) {
-        if (i == this.waitForEms / 5) {
-          throw e;
-        }
-        try {
-          Thread.sleep(5000);
-        } catch (InterruptedException e1) {
-          e1.printStackTrace();
-        }
-      }
-    }
-  }
-
-  @Override
-  public void checkEmsStarted(String hostname) throws BadFormatException {
-    boolean registered = true;
-    String extractedId = "";
-    Pattern pattern = Pattern.compile(".*-([1-9]+$)");
-    Matcher matcher = pattern.matcher(hostname);
-    if (matcher.matches()) {
-      extractedId = (matcher.group(1));
-    } else {
-      throw new BadFormatException(
-          "Hostname does not fit the expected format. Must fit: '.*-[1-9]+$'");
-    }
-    log.trace("Extracted host ID: " + extractedId);
-    log.trace("Expected hostnames: " + this.getExpectedHostnames());
-    for (String expectedHostname : this.getExpectedHostnames()) {
-      if (expectedHostname.endsWith(extractedId)) {
-        registered = false;
-        break;
-      }
-    }
-    if (registered == false) {
-      throw new RuntimeException("No EMS for hostname: " + hostname);
-    }
-  }
-
-  @Override
-  public void saveScriptOnEms(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord, Object scripts) throws Exception {
-
-    log.debug("Scripts are: " + scripts.getClass().getName());
-
-    if (scripts instanceof String) {
-      String scriptLink = (String) scripts;
-      log.debug("Scripts are: " + scriptLink);
-      JsonObject jsonMessage = JsonUtils.getJsonObject("CLONE_SCRIPTS", scriptLink, scriptPath);
-
-      for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
-        for (VNFCInstance vnfcInstance : virtualDeploymentUnit.getVnfc_instance()) {
-          executeActionOnEMS(
-              vnfcInstance.getHostname(),
-              jsonMessage.toString(),
-              virtualNetworkFunctionRecord,
-              vnfcInstance);
-        }
-      }
-    } else if (scripts instanceof Set) {
-      Iterable<Script> scriptSet = (Set<Script>) scripts;
-
-      for (Script script : scriptSet) {
-        log.debug("Sending script encoded base64 ");
-        String base64String = Base64.encodeBase64String(script.getPayload());
-        log.trace("The base64 string is: " + base64String);
-        JsonObject jsonMessage =
-            JsonUtils.getJsonObjectForScript(
-                "SAVE_SCRIPTS", base64String, script.getName(), scriptPath);
-        for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
-          for (VNFCInstance vnfcInstance : virtualDeploymentUnit.getVnfc_instance()) {
-            executeActionOnEMS(
-                vnfcInstance.getHostname(),
-                jsonMessage.toString(),
-                virtualNetworkFunctionRecord,
-                vnfcInstance);
-          }
-        }
-      }
-    }
-  }
-
-  @Override
-  public void saveScriptOnEms(
-      VNFCInstance vnfcInstance,
-      Object scripts,
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord)
-      throws Exception {
-
-    log.debug("Scripts are: " + scripts.getClass().getName());
-
-    if (scripts instanceof String) {
-      String scriptLink = (String) scripts;
-      log.debug("Scripts are: " + scriptLink);
-      JsonObject jsonMessage = JsonUtils.getJsonObject("CLONE_SCRIPTS", scriptLink, scriptPath);
-      executeActionOnEMS(
-          vnfcInstance.getHostname(),
-          jsonMessage.toString(),
-          virtualNetworkFunctionRecord,
-          vnfcInstance);
-    } else if (scripts instanceof Set) {
-      Iterable<Script> scriptSet = (Set<Script>) scripts;
-      for (Script script : scriptSet) {
-        log.debug("Sending script encoded base64 ");
-        String base64String = Base64.encodeBase64String(script.getPayload());
-        log.trace("The base64 string is: " + base64String);
-        JsonObject jsonMessage =
-            JsonUtils.getJsonObjectForScript(
-                "SAVE_SCRIPTS", base64String, script.getName(), scriptPath);
-        executeActionOnEMS(
-            vnfcInstance.getHostname(),
-            jsonMessage.toString(),
-            virtualNetworkFunctionRecord,
-            vnfcInstance);
-      }
-    }
-  }
-
-  @Override
-  public String executeActionOnEMS(
-      String vduHostname,
-      String command,
-      VirtualNetworkFunctionRecord vnfr,
-      VNFCInstance vnfcInstance)
-      throws Exception {
-    log.debug("Sending message and waiting: " + command + " to " + vduHostname);
-    log.info("Waiting answer from EMS - " + vduHostname);
-
-    String response =
-        vnfmHelper.sendAndReceive(
-            command, "vnfm." + vduHostname.toLowerCase().replace("_", "-") + ".actions");
-
-    log.debug("Received from EMS (" + vduHostname + "): " + response);
-
-    if (response == null) {
-      throw new NullPointerException("Response from EMS is null");
-    }
-
-    JsonObject jsonObject = this.parser.fromJson(response, JsonObject.class);
-
-    if (jsonObject.get("status").getAsInt() == 0) {
-      try {
-        log.debug("Output from EMS (" + vduHostname + ") is: " + jsonObject.get("output"));
-      } catch (Exception e) {
-        e.printStackTrace();
-        throw e;
-      }
-    } else {
-      String err = jsonObject.get("err").getAsString();
-      log.error(err);
-      vnfcInstance.setState("error");
-      LogUtils.saveLogToFile(
-          vnfr,
-          parser.fromJson(command, JsonObject.class).get("payload").getAsString(),
-          vnfcInstance,
-          response,
-          true);
-      throw new VnfmSdkException("EMS (" + vduHostname + ") had the following error: " + err);
-    }
-    return response;
-  }
-
-  @Override
-  public String getEmsHeartbeat() {
-    return emsHeartbeat;
-  }
-
-  @Override
-  public String getEmsAutodelete() {
-    return emsAutodelete;
-  }
-
-  @Override
-  public String getEmsVersion() {
-    return emsVersion;
-  }
-
-  public static void main(String[] args) {
-    String hostname = "-1234";
-    //    String hostname = "asda-sdasda-sd-1234567";
-    Pattern pattern = Pattern.compile(".*-([1-9]+$)");
-    Matcher matcher = pattern.matcher(hostname);
-    if (matcher.matches())
-    //    if (matcher.find())
-    {
-      String extracedID = (matcher.group(1));
-
-      System.out.println("Entered");
-      System.out.println(extracedID);
-    } else {
-      System.out.println("not entered");
-    }
-  }
-}
diff --git a/src/main/java/org/openbaton/vnfm/generic/utils/EmsRegistrator.java b/src/main/java/org/openbaton/vnfm/generic/utils/EmsRegistrator.java
new file mode 100644
index 0000000..cfff41b
--- /dev/null
+++ b/src/main/java/org/openbaton/vnfm/generic/utils/EmsRegistrator.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2016 Open Baton (http://www.openbaton.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.openbaton.vnfm.generic.utils;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonObject;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Service;
+
+import javax.annotation.PostConstruct;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Created by lto on 15/09/15.
+ */
+@Service
+@Scope
+public class EmsRegistrator implements org.openbaton.common.vnfm_sdk.interfaces.EmsRegistrator {
+
+  private Logger log = LoggerFactory.getLogger(getClass());
+  private Gson parser = new GsonBuilder().setPrettyPrinting().create();
+
+  //TODO consider using DB in case of failure etc...
+  private Set<String> expectedHostnames;
+
+  @PostConstruct
+  private void init() {
+    this.expectedHostnames = new HashSet<>();
+  }
+
+  public Set<String> getExpectedHostnames() {
+    return this.expectedHostnames;
+  }
+
+  public void register(String hostname) {
+    this.log.debug("EMSRegister adding: " + hostname);
+    this.expectedHostnames.add(hostname.toLowerCase().replace("_", "-"));
+  }
+
+  public void unregister(String hostname) {
+    this.log.debug("EMSRegister removing: " + hostname);
+    if (this.expectedHostnames.contains(hostname)) this.expectedHostnames.remove(hostname);
+  }
+
+  @Override
+  public void unregisterFromMsg(String json) {
+    this.log.debug("EMSRegister received: " + json);
+    JsonObject object = this.parser.fromJson(json, JsonObject.class);
+    String hostname = object.get("hostname").getAsString().toLowerCase().replace("_", "-");
+    this.log.debug("EMSRegister removing: " + hostname);
+    if (this.expectedHostnames.contains(hostname)) this.expectedHostnames.remove(hostname);
+  }
+}
diff --git a/src/main/java/org/openbaton/vnfm/generic/utils/JsonUtils.java b/src/main/java/org/openbaton/vnfm/generic/utils/JsonUtils.java
deleted file mode 100644
index 5326e03..0000000
--- a/src/main/java/org/openbaton/vnfm/generic/utils/JsonUtils.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- *
- *  * Copyright (c) 2016 Fraunhofer FOKUS
- *  *
- *  * Licensed under the Apache License, Version 2.0 (the "License");
- *  * you may not use this file except in compliance with the License.
- *  * You may obtain a copy of the License at
- *  *
- *  *     http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  * Unless required by applicable law or agreed to in writing, software
- *  * distributed under the License is distributed on an "AS IS" BASIS,
- *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  * See the License for the specific language governing permissions and
- *  * limitations under the License.
- *
- *
- */
-
-package org.openbaton.vnfm.generic.utils;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-
-import java.util.Map;
-
-/**
- * Created by mpa on 14.12.16.
- */
-public class JsonUtils {
-
-  private static Gson parser = new GsonBuilder().setPrettyPrinting().create();
-
-  public static JsonObject getJsonObject(String action, String payload, String scriptPath) {
-    JsonObject jsonMessage = new JsonObject();
-    jsonMessage.addProperty("action", action);
-    jsonMessage.addProperty("payload", payload);
-    jsonMessage.addProperty("script-path", scriptPath);
-    return jsonMessage;
-  }
-
-  public static JsonObject getJsonObject(String action, String payload, Map<String, String> env) {
-    JsonObject jsonMessage = new JsonObject();
-    jsonMessage.addProperty("action", action);
-    jsonMessage.addProperty("payload", payload);
-    jsonMessage.add("env", parser.fromJson(parser.toJson(env), JsonObject.class));
-    return jsonMessage;
-  }
-
-  public static JsonObject getJsonObjectForScript(
-      String save_scripts, String payload, String name, String scriptPath) {
-    JsonObject jsonMessage = new JsonObject();
-    jsonMessage.addProperty("action", save_scripts);
-    jsonMessage.addProperty("payload", payload);
-    jsonMessage.addProperty("name", name);
-    jsonMessage.addProperty("script-path", scriptPath);
-    return jsonMessage;
-  }
-
-  public static String parse(String json) {
-    return parser
-        .fromJson(json, JsonObject.class)
-        .get("output")
-        .getAsString()
-        .replaceAll("\\\\n", "\n");
-  }
-}
diff --git a/src/main/java/org/openbaton/vnfm/generic/utils/LifeCycleManagement.java b/src/main/java/org/openbaton/vnfm/generic/utils/LifeCycleManagement.java
deleted file mode 100644
index 741e825..0000000
--- a/src/main/java/org/openbaton/vnfm/generic/utils/LifeCycleManagement.java
+++ /dev/null
@@ -1,531 +0,0 @@
-/*
- *
- *  * Copyright (c) 2016 Fraunhofer FOKUS
- *  *
- *  * Licensed under the Apache License, Version 2.0 (the "License");
- *  * you may not use this file except in compliance with the License.
- *  * You may obtain a copy of the License at
- *  *
- *  *     http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  * Unless required by applicable law or agreed to in writing, software
- *  * distributed under the License is distributed on an "AS IS" BASIS,
- *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  * See the License for the specific language governing permissions and
- *  * limitations under the License.
- *
- *
- */
-
-package org.openbaton.vnfm.generic.utils;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import org.apache.commons.codec.binary.Base64;
-import org.openbaton.catalogue.mano.common.Event;
-import org.openbaton.catalogue.mano.common.Ip;
-import org.openbaton.catalogue.mano.common.LifecycleEvent;
-import org.openbaton.catalogue.mano.descriptor.VirtualDeploymentUnit;
-import org.openbaton.catalogue.mano.record.VNFCInstance;
-import org.openbaton.catalogue.mano.record.VNFRecordDependency;
-import org.openbaton.catalogue.mano.record.VirtualNetworkFunctionRecord;
-import org.openbaton.catalogue.nfvo.ConfigurationParameter;
-import org.openbaton.catalogue.nfvo.Script;
-import org.openbaton.catalogue.nfvo.VNFCDependencyParameters;
-import org.openbaton.common.vnfm_sdk.AbstractVnfm;
-import org.openbaton.common.vnfm_sdk.VnfmHelper;
-import org.openbaton.common.vnfm_sdk.exception.VnfmSdkException;
-import org.openbaton.common.vnfm_sdk.interfaces.EmsInterface;
-import org.openbaton.common.vnfm_sdk.utils.VnfmUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Service;
-
-import java.util.*;
-
-/**
- * Created by lto on 15/09/15.
- */
-@Service
-@Scope
-public class LifeCycleManagement {
-
-  protected Logger log = LoggerFactory.getLogger(this.getClass());
-
-  @Autowired private EmsInterface ems;
-
-  public Iterable<String> executeScriptsForEvent(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord, Event event)
-      throws Exception { //TODO make it parallel
-    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
-    Collection<String> res = new ArrayList<>();
-    LifecycleEvent le =
-        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
-
-    if (le != null) {
-      log.trace(
-          "The number of scripts for "
-              + virtualNetworkFunctionRecord.getName()
-              + " are: "
-              + le.getLifecycle_events());
-      for (String script : le.getLifecycle_events()) {
-        log.info(
-            "Sending script: "
-                + script
-                + " to VirtualNetworkFunctionRecord: "
-                + virtualNetworkFunctionRecord.getName());
-        for (VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord.getVdu()) {
-          for (VNFCInstance vnfcInstance : vdu.getVnfc_instance()) {
-
-            Map<String, String> tempEnv = new HashMap<>();
-            for (Ip ip : vnfcInstance.getIps()) {
-              log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
-              tempEnv.put(ip.getNetName(), ip.getIp());
-            }
-            log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
-            for (Ip fip : vnfcInstance.getFloatingIps()) {
-              tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
-            }
-
-            tempEnv.put("hostname", vnfcInstance.getHostname());
-            tempEnv = modifyUnsafeEnvVarNames(tempEnv);
-            env.putAll(tempEnv);
-            log.info("Environment Variables are: " + env);
-
-            String command = JsonUtils.getJsonObject("EXECUTE", script, env).toString();
-            String output =
-                ems.executeActionOnEMS(
-                    vnfcInstance.getHostname(),
-                    command,
-                    virtualNetworkFunctionRecord,
-                    vnfcInstance);
-            res.add(output);
-
-            LogUtils.saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
-            for (String key : tempEnv.keySet()) {
-              env.remove(key);
-            }
-          }
-        }
-      }
-    }
-    return res;
-  }
-
-  public Iterable<String> executeScriptsForEvent(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
-      Event event,
-      VNFRecordDependency dependency)
-      throws Exception {
-    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
-    LifecycleEvent le =
-        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
-    List<String> res = new ArrayList<>();
-    if (le != null) {
-      for (String script : le.getLifecycle_events()) {
-
-        String type = null;
-        if (script.contains("_")) {
-          type = script.substring(0, script.indexOf('_'));
-          log.info(
-              "Sending command: "
-                  + script
-                  + " to adding relation with type: "
-                  + type
-                  + " from VirtualNetworkFunctionRecord "
-                  + virtualNetworkFunctionRecord.getName());
-        }
-
-        for (VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord.getVdu()) {
-          for (VNFCInstance vnfcInstance : vdu.getVnfc_instance()) {
-            if (dependency.getVnfcParameters().get(type) != null) {
-              for (String vnfcId :
-                  dependency.getVnfcParameters().get(type).getParameters().keySet()) {
-
-                Map<String, String> tempEnv = new HashMap<>();
-
-                //Adding own ips
-                for (Ip ip : vnfcInstance.getIps()) {
-                  log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
-                  tempEnv.put(ip.getNetName(), ip.getIp());
-                }
-
-                //Adding own floating ip
-                for (Ip fip : vnfcInstance.getFloatingIps()) {
-                  log.debug("adding floatingIp: " + fip.getNetName() + " = " + fip.getIp());
-                  tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
-                }
-
-                if (script.contains("_")) {
-                  //Adding foreign parameters such as ip
-                  log.debug("Fetching parameter from dependency of type: " + type);
-                  Map<String, String> parameters =
-                      dependency.getParameters().get(type).getParameters();
-
-                  for (Map.Entry<String, String> param : parameters.entrySet()) {
-                    log.debug(
-                        "adding param: " + type + "_" + param.getKey() + " = " + param.getValue());
-                    tempEnv.put(type + "_" + param.getKey(), param.getValue());
-                  }
-
-                  Map<String, String> parametersVNFC =
-                      dependency
-                          .getVnfcParameters()
-                          .get(type)
-                          .getParameters()
-                          .get(vnfcId)
-                          .getParameters();
-                  for (Map.Entry<String, String> param : parametersVNFC.entrySet()) {
-                    log.debug(
-                        "adding param: " + type + "_" + param.getKey() + " = " + param.getValue());
-                    tempEnv.put(type + "_" + param.getKey(), param.getValue());
-                  }
-                }
-
-                tempEnv.put("hostname", vnfcInstance.getHostname());
-                tempEnv = modifyUnsafeEnvVarNames(tempEnv);
-                env.putAll(tempEnv);
-                log.info("Environment Variables are: " + env);
-
-                String command = JsonUtils.getJsonObject("EXECUTE", script, env).toString();
-                String output =
-                    ems.executeActionOnEMS(
-                        vnfcInstance.getHostname(),
-                        command,
-                        virtualNetworkFunctionRecord,
-                        vnfcInstance);
-                res.add(output);
-
-                LogUtils.saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
-                for (String key : tempEnv.keySet()) {
-                  env.remove(key);
-                }
-              }
-            }
-          }
-        }
-      }
-    }
-    return res;
-  }
-
-  public Iterable<String> executeScriptsForEvent(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
-      VNFCInstance vnfcInstance,
-      Event event,
-      VNFRecordDependency dependency)
-      throws Exception {
-    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
-    List<String> res = new ArrayList<>();
-    LifecycleEvent le =
-        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
-    log.trace(
-        "The number of scripts for "
-            + virtualNetworkFunctionRecord.getName()
-            + " are: "
-            + le.getLifecycle_events());
-    log.debug("DEPENDENCY IS: " + dependency);
-    if (le != null) {
-      for (String script : le.getLifecycle_events()) {
-        int indexOf = script.indexOf('_');
-        VNFCDependencyParameters vnfcDependencyParameters = null;
-        String type = null;
-        if (indexOf != -1) {
-          type = script.substring(0, indexOf);
-          vnfcDependencyParameters = dependency.getVnfcParameters().get(type);
-        }
-        if (vnfcDependencyParameters != null) {
-          log.debug(
-              "There are "
-                  + vnfcDependencyParameters.getParameters().size()
-                  + " VNFCInstanceForeign");
-          for (String vnfcForeignId : vnfcDependencyParameters.getParameters().keySet()) {
-            log.info("Running script: " + script + " for VNFCInstance foreign id " + vnfcForeignId);
-
-            log.info(
-                "Sending command: "
-                    + script
-                    + " to adding relation with type: "
-                    + type
-                    + " from VirtualNetworkFunctionRecord "
-                    + virtualNetworkFunctionRecord.getName());
-
-            Map<String, String> tempEnv = new HashMap<>();
-
-            //Adding own ips
-            for (Ip ip : vnfcInstance.getIps()) {
-              log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
-              tempEnv.put(ip.getNetName(), ip.getIp());
-            }
-
-            //Adding own floating ip
-            log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
-            for (Ip fip : vnfcInstance.getFloatingIps()) {
-              tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
-            }
-            //Adding foreign parameters such as ip
-            if (script.contains("_")) {
-              //Adding foreign parameters such as ip
-              Map<String, String> parameters = dependency.getParameters().get(type).getParameters();
-              for (Map.Entry<String, String> param : parameters.entrySet()) {
-                tempEnv.put(type + "_" + param.getKey(), param.getValue());
-              }
-
-              Map<String, String> parametersVNFC =
-                  vnfcDependencyParameters.getParameters().get(vnfcForeignId).getParameters();
-              for (Map.Entry<String, String> param : parametersVNFC.entrySet()) {
-                tempEnv.put(type + "_" + param.getKey(), param.getValue());
-              }
-            }
-
-            tempEnv.put("hostname", vnfcInstance.getHostname());
-            tempEnv = modifyUnsafeEnvVarNames(tempEnv);
-            env.putAll(tempEnv);
-            log.info("The Environment Variables for script " + script + " are: " + env);
-
-            String command = JsonUtils.getJsonObject("EXECUTE", script, env).toString();
-            String output =
-                ems.executeActionOnEMS(
-                    vnfcInstance.getHostname(),
-                    command,
-                    virtualNetworkFunctionRecord,
-                    vnfcInstance);
-            res.add(output);
-
-            LogUtils.saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
-            for (String key : tempEnv.keySet()) {
-              env.remove(key);
-            }
-          }
-        }
-      }
-    }
-    return res;
-  }
-
-  public Iterable<String> executeScriptsForEvent(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
-      VNFCInstance vnfcInstance,
-      Event event,
-      String cause)
-      throws Exception {
-    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
-    List<String> res = new LinkedList<>();
-    LifecycleEvent le =
-        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
-
-    if (le != null) {
-      log.trace(
-          "The number of scripts for "
-              + virtualNetworkFunctionRecord.getName()
-              + " are: "
-              + le.getLifecycle_events());
-      for (String script : le.getLifecycle_events()) {
-        log.info(
-            "Sending script: "
-                + script
-                + " to VirtualNetworkFunctionRecord: "
-                + virtualNetworkFunctionRecord.getName());
-        Map<String, String> tempEnv = new HashMap<>();
-        for (Ip ip : vnfcInstance.getIps()) {
-          log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
-          tempEnv.put(ip.getNetName(), ip.getIp());
-        }
-        log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
-        for (Ip fip : vnfcInstance.getFloatingIps()) {
-          tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
-        }
-
-        tempEnv.put("hostname", vnfcInstance.getHostname());
-        //Add cause to the environment variables
-        tempEnv.put("cause", cause);
-
-        tempEnv = modifyUnsafeEnvVarNames(tempEnv);
-        env.putAll(tempEnv);
-        log.info("The Environment Variables for script " + script + " are: " + env);
-
-        String command = JsonUtils.getJsonObject("EXECUTE", script, env).toString();
-        String output =
-            ems.executeActionOnEMS(
-                vnfcInstance.getHostname(), command, virtualNetworkFunctionRecord, vnfcInstance);
-        res.add(output);
-        LogUtils.saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance, output);
-        for (String key : tempEnv.keySet()) {
-          env.remove(key);
-        }
-      }
-    }
-    return res;
-  }
-
-  private Map<String, String> modifyUnsafeEnvVarNames(Map<String, String> env) {
-
-    Map<String, String> result = new HashMap<>();
-
-    for (Map.Entry<String, String> entry : env.entrySet()) {
-      result.put(entry.getKey().replaceAll("[^A-Za-z0-9_]", "_"), entry.getValue());
-    }
-
-    return result;
-  }
-
-  public Iterable<String> executeScriptsForEvent(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
-      VNFCInstance vnfcInstance,
-      Event event)
-      throws Exception {
-    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
-    List<String> res = new ArrayList<>();
-    LifecycleEvent le =
-        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
-
-    if (le != null) {
-      log.trace(
-          "The number of scripts for "
-              + virtualNetworkFunctionRecord.getName()
-              + " are: "
-              + le.getLifecycle_events());
-      for (String script : le.getLifecycle_events()) {
-        log.info(
-            "Sending script: "
-                + script
-                + " to VirtualNetworkFunctionRecord: "
-                + virtualNetworkFunctionRecord.getName());
-        Map<String, String> tempEnv = new HashMap<>();
-        for (Ip ip : vnfcInstance.getIps()) {
-          log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
-          tempEnv.put(ip.getNetName(), ip.getIp());
-        }
-        log.debug("adding floatingIp: " + vnfcInstance.getFloatingIps());
-        for (Ip fip : vnfcInstance.getFloatingIps()) {
-          tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
-        }
-
-        tempEnv.put("hostname", vnfcInstance.getHostname());
-
-        tempEnv = modifyUnsafeEnvVarNames(tempEnv);
-        env.putAll(tempEnv);
-        log.info("The Environment Variables for script " + script + " are: " + env);
-
-        String command = JsonUtils.getJsonObject("EXECUTE", script, env).toString();
-        if (event.ordinal() == Event.SCALE_IN.ordinal()) {
-          for (VirtualDeploymentUnit vdu : virtualNetworkFunctionRecord.getVdu()) {
-            for (VNFCInstance vnfcInstance1 : vdu.getVnfc_instance()) {
-
-              String output =
-                  ems.executeActionOnEMS(
-                      vnfcInstance1.getHostname(),
-                      command,
-                      virtualNetworkFunctionRecord,
-                      vnfcInstance);
-              res.add(output);
-              LogUtils.saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance1, output);
-            }
-          }
-        } else {
-          res.add(
-              ems.executeActionOnEMS(
-                  vnfcInstance.getHostname(), command, virtualNetworkFunctionRecord, vnfcInstance));
-        }
-
-        for (String key : tempEnv.keySet()) {
-          env.remove(key);
-        }
-      }
-    }
-    return res;
-  }
-
-  public Iterable<? extends String> executeScriptsForEventOnVnfr(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
-      VNFCInstance vnfcInstanceRemote,
-      Event event)
-      throws Exception {
-    Map<String, String> env = getMap(virtualNetworkFunctionRecord);
-    Collection<String> res = new ArrayList<>();
-    LifecycleEvent le =
-        VnfmUtils.getLifecycleEvent(virtualNetworkFunctionRecord.getLifecycle_event(), event);
-    if (le != null) {
-      log.trace(
-          "The number of scripts for "
-              + virtualNetworkFunctionRecord.getName()
-              + " are: "
-              + le.getLifecycle_events());
-      for (VirtualDeploymentUnit virtualDeploymentUnit : virtualNetworkFunctionRecord.getVdu()) {
-        for (VNFCInstance vnfcInstanceLocal : virtualDeploymentUnit.getVnfc_instance()) {
-          for (String script : le.getLifecycle_events()) {
-            log.info(
-                "Sending script: "
-                    + script
-                    + " to VirtualNetworkFunctionRecord: "
-                    + virtualNetworkFunctionRecord.getName()
-                    + " on VNFCInstance: "
-                    + vnfcInstanceLocal.getId());
-            Map<String, String> tempEnv = new HashMap<>();
-            for (Ip ip : vnfcInstanceLocal.getIps()) {
-              log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
-              tempEnv.put(ip.getNetName(), ip.getIp());
-            }
-            log.debug("adding floatingIp: " + vnfcInstanceLocal.getFloatingIps());
-            for (Ip fip : vnfcInstanceLocal.getFloatingIps()) {
-              tempEnv.put(fip.getNetName() + "_floatingIp", fip.getIp());
-            }
-
-            tempEnv.put("hostname", vnfcInstanceLocal.getHostname());
-
-            if (vnfcInstanceRemote != null) {
-              //TODO what should i put here?
-              for (Ip ip : vnfcInstanceRemote.getIps()) {
-                log.debug("Adding net: " + ip.getNetName() + " with value: " + ip.getIp());
-                tempEnv.put("removing_" + ip.getNetName(), ip.getIp());
-              }
-              log.debug("adding floatingIp: " + vnfcInstanceRemote.getFloatingIps());
-              for (Ip fip : vnfcInstanceRemote.getFloatingIps()) {
-                tempEnv.put("removing_" + fip.getNetName() + "_floatingIp", fip.getIp());
-              }
-
-              tempEnv.put("removing_" + "hostname", vnfcInstanceRemote.getHostname());
-            }
-
-            tempEnv = modifyUnsafeEnvVarNames(tempEnv);
-            env.putAll(tempEnv);
-            log.info("The Environment Variables for script " + script + " are: " + env);
-
-            String command = JsonUtils.getJsonObject("EXECUTE", script, env).toString();
-            String output =
-                ems.executeActionOnEMS(
-                    vnfcInstanceLocal.getHostname(),
-                    command,
-                    virtualNetworkFunctionRecord,
-                    vnfcInstanceLocal);
-            res.add(output);
-
-            LogUtils.saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstanceLocal, output);
-            for (String key : tempEnv.keySet()) {
-              env.remove(key);
-            }
-          }
-        }
-      }
-    }
-    return res;
-  }
-
-  private Map<String, String> getMap(VirtualNetworkFunctionRecord virtualNetworkFunctionRecord) {
-    Map<String, String> res = new HashMap<>();
-    for (ConfigurationParameter configurationParameter :
-        virtualNetworkFunctionRecord.getProvides().getConfigurationParameters()) {
-      res.put(configurationParameter.getConfKey(), configurationParameter.getValue());
-    }
-    for (ConfigurationParameter configurationParameter :
-        virtualNetworkFunctionRecord.getConfigurations().getConfigurationParameters()) {
-      res.put(configurationParameter.getConfKey(), configurationParameter.getValue());
-    }
-    res = modifyUnsafeEnvVarNames(res);
-    return res;
-  }
-}
diff --git a/src/main/java/org/openbaton/vnfm/generic/utils/LogUtils.java b/src/main/java/org/openbaton/vnfm/generic/utils/LogUtils.java
deleted file mode 100644
index 47d6695..0000000
--- a/src/main/java/org/openbaton/vnfm/generic/utils/LogUtils.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- *
- *  * Copyright (c) 2016 Fraunhofer FOKUS
- *  *
- *  * Licensed under the Apache License, Version 2.0 (the "License");
- *  * you may not use this file except in compliance with the License.
- *  * You may obtain a copy of the License at
- *  *
- *  *     http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  * Unless required by applicable law or agreed to in writing, software
- *  * distributed under the License is distributed on an "AS IS" BASIS,
- *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  * See the License for the specific language governing permissions and
- *  * limitations under the License.
- *
- *
- */
-
-package org.openbaton.vnfm.generic.utils;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import org.openbaton.catalogue.mano.record.VNFCInstance;
-import org.openbaton.catalogue.mano.record.VirtualNetworkFunctionRecord;
-import org.springframework.beans.factory.annotation.Value;
-
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Paths;
-import java.nio.file.StandardOpenOption;
-
-/**
- * Created by mpa on 14.12.16.
- */
-public class LogUtils {
-
-  private static Gson parser = new GsonBuilder().setPrettyPrinting().create();
-
-  @Value("${vnfm.ems.script.logpath:/var/log/openbaton/scriptsLog/}")
-  private static String scriptsLogPath;
-
-  @Value("${vnfm.ems.script.old:60}")
-  private static int old;
-
-  public static void init() {
-    if (old > 0) {
-      File f = new File(scriptsLogPath);
-      f.mkdirs();
-    }
-  }
-
-  public static void saveLogToFile(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
-      String script,
-      VNFCInstance vnfcInstance1,
-      String output)
-      throws IOException {
-    saveLogToFile(virtualNetworkFunctionRecord, script, vnfcInstance1, output, false);
-  }
-
-  public static void saveLogToFile(
-      VirtualNetworkFunctionRecord virtualNetworkFunctionRecord,
-      String script,
-      VNFCInstance vnfcInstance1,
-      String output,
-      boolean error)
-      throws IOException {
-    if (old > 0) {
-      String path = "";
-      if (!error) {
-        path =
-            scriptsLogPath
-                + virtualNetworkFunctionRecord.getName()
-                + "/"
-                + vnfcInstance1.getHostname()
-                + ".log";
-      } else {
-        path =
-            scriptsLogPath
-                + virtualNetworkFunctionRecord.getName()
-                + "/"
-                + vnfcInstance1.getHostname()
-                + "-error.log";
-      }
-      File f = new File(path);
-
-      if (!f.exists()) {
-        f.getParentFile().mkdirs();
-        f.createNewFile();
-      }
-
-      if (!error) {
-        Files.write(
-            Paths.get(path),
-            ("Output of Script : " + script + "\n\n").getBytes(),
-            StandardOpenOption.APPEND);
-        Files.write(
-            Paths.get(path),
-            parser
-                .fromJson(output, JsonObject.class)
-                .get("output")
-                .getAsString()
-                .replaceAll("\\\\n", "\n")
-                .getBytes(),
-            StandardOpenOption.APPEND);
-      } else {
-        Files.write(
-            Paths.get(path),
-            ("Error log of Script : " + script + "\n\n").getBytes(),
-            StandardOpenOption.APPEND);
-        Files.write(
-            Paths.get(path),
-            parser
-                .fromJson(output, JsonObject.class)
-                .get("err")
-                .getAsString()
-                .replaceAll("\\\\n", "\n")
-                .getBytes(),
-            StandardOpenOption.APPEND);
-      }
-      Files.write(
-          Paths.get(path),
-          "\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~\n#########################\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n"
-              .getBytes(),
-          StandardOpenOption.APPEND);
-    }
-  }
-}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index 3fe129f..ddb5fb4 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -22,10 +22,6 @@ vnfm.rabbitmq.exclusive = false
 vnfm.rabbitmq.minConcurrency = 15
 vnfm.rabbitmq.maxConcurrency = 30
 
-vnfm.ems.queue.autodelete = true
-vnfm.ems.queue.heartbeat = 120
-vnfm.ems.version = 0.19
-
 # Timeout in seconds for any sendAndReceive
 vnfm.rabbitmq.sar.timeout = 1000
 
